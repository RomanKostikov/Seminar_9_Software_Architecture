# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Cloud(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, cloud_id: str=None, id_client: str=None, os: str=None, ram: str=None, cpu: str=None):  # noqa: E501
        """Cloud - a model defined in Swagger

        :param cloud_id: The cloud_id of this Cloud.  # noqa: E501
        :type cloud_id: str
        :param id_client: The id_client of this Cloud.  # noqa: E501
        :type id_client: str
        :param os: The os of this Cloud.  # noqa: E501
        :type os: str
        :param ram: The ram of this Cloud.  # noqa: E501
        :type ram: str
        :param cpu: The cpu of this Cloud.  # noqa: E501
        :type cpu: str
        """
        self.swagger_types = {
            'cloud_id': str,
            'id_client': str,
            'os': str,
            'ram': str,
            'cpu': str
        }

        self.attribute_map = {
            'cloud_id': 'cloud_id',
            'id_client': 'id_client',
            'os': 'OS',
            'ram': 'RAM',
            'cpu': 'CPU'
        }
        self._cloud_id = cloud_id
        self._id_client = id_client
        self._os = os
        self._ram = ram
        self._cpu = cpu

    @classmethod
    def from_dict(cls, dikt) -> 'Cloud':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Cloud of this Cloud.  # noqa: E501
        :rtype: Cloud
        """
        return util.deserialize_model(dikt, cls)

    @property
    def cloud_id(self) -> str:
        """Gets the cloud_id of this Cloud.


        :return: The cloud_id of this Cloud.
        :rtype: str
        """
        return self._cloud_id

    @cloud_id.setter
    def cloud_id(self, cloud_id: str):
        """Sets the cloud_id of this Cloud.


        :param cloud_id: The cloud_id of this Cloud.
        :type cloud_id: str
        """

        self._cloud_id = cloud_id

    @property
    def id_client(self) -> str:
        """Gets the id_client of this Cloud.


        :return: The id_client of this Cloud.
        :rtype: str
        """
        return self._id_client

    @id_client.setter
    def id_client(self, id_client: str):
        """Sets the id_client of this Cloud.


        :param id_client: The id_client of this Cloud.
        :type id_client: str
        """
        if id_client is None:
            raise ValueError("Invalid value for `id_client`, must not be `None`")  # noqa: E501

        self._id_client = id_client

    @property
    def os(self) -> str:
        """Gets the os of this Cloud.

        Операционная система сервера  # noqa: E501

        :return: The os of this Cloud.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os: str):
        """Sets the os of this Cloud.

        Операционная система сервера  # noqa: E501

        :param os: The os of this Cloud.
        :type os: str
        """
        allowed_values = ["Windows", "Linux"]  # noqa: E501
        if os not in allowed_values:
            raise ValueError(
                "Invalid value for `os` ({0}), must be one of {1}"
                .format(os, allowed_values)
            )

        self._os = os

    @property
    def ram(self) -> str:
        """Gets the ram of this Cloud.

        Количество оперативной памяти  # noqa: E501

        :return: The ram of this Cloud.
        :rtype: str
        """
        return self._ram

    @ram.setter
    def ram(self, ram: str):
        """Sets the ram of this Cloud.

        Количество оперативной памяти  # noqa: E501

        :param ram: The ram of this Cloud.
        :type ram: str
        """
        if ram is None:
            raise ValueError("Invalid value for `ram`, must not be `None`")  # noqa: E501

        self._ram = ram

    @property
    def cpu(self) -> str:
        """Gets the cpu of this Cloud.

        Количество ядер CPU  # noqa: E501

        :return: The cpu of this Cloud.
        :rtype: str
        """
        return self._cpu

    @cpu.setter
    def cpu(self, cpu: str):
        """Sets the cpu of this Cloud.

        Количество ядер CPU  # noqa: E501

        :param cpu: The cpu of this Cloud.
        :type cpu: str
        """
        if cpu is None:
            raise ValueError("Invalid value for `cpu`, must not be `None`")  # noqa: E501

        self._cpu = cpu
